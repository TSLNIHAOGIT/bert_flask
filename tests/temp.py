import json
import pandas as pd

def f1():
  # a={'param': [[{'historyData': [['date', '美国', '中国', '日本', '德国', '英国'], [2017, 0.24033217649975208, 0.15171046108081307, 0.060361923648983636, 0.04561229548834903, 0.04561229548834903], [2016, 0.24519357387411117, 0.14735317355807215, 0.06518303924150645, 0.045825651830392417, 0.03489597050302871], [2015, 0.242116515232496, 0.1477819347942277, 0.058658471405665415, 0.04516301443078567, 0.03861571352218065], [2014, 0.22027044104637938, 0.1324402881334513, 0.061291545557942625, 0.04915961076709213, 0.038165044862883864], [2013, 0.2166125892277742, 0.12472420506164827, 0.06696950032446464, 0.04866969500324465, 0.03556132381570409], [2012, 0.21555288782179538, 0.11417900493530747, 0.08269974656529279, 0.04721888755502201, 0.03548085901027078], [2011, 0.21173260572987723, 0.10327421555252388, 0.08403819918144612, 0.051296043656207366, 0.03574351978171897], [2010, 0.22680412371134023, 0.09248029108550637, 0.08641600970285022, 0.05184960582171013, 0.03699211643420255], [2009, 0.23977386099102094, 0.08496840705021616, 0.08696375124709013, 0.05686730961090788, 0.03957432657133355], [2008, 0.23206684534132116, 0.07252088916916286, 0.07945766987230017, 0.059120290083556674, 0.04556203689106102], [2007, 0.25038907141621997, 0.06138682344803735, 0.07816012450285319, 0.05948469652429535, 0.053086633235344974], [2006, 0.26996493961823137, 0.05356447214647448, 0.08823529411764706, 0.0584339696143358, 0.052395792754187764], [2005, 0.2761020881670534, 0.04830204598186037, 0.10040075933347395, 0.06032482598607889, 0.053153343176545034], [2004, 0.28020095912308746, 0.044759077414934914, 0.11007079241836036, 0.06439826444393697, 0.05480703356930806], [2003, 0.2960390946502057, 0.0426954732510288, 0.11445473251028807, 0.06455761316872427, 0.05246913580246913], [2002, 0.3169745958429561, 0.0424364896073903, 0.11893764434180139, 0.06004618937644342, 0.05109699769053118], [2001, 0.31824992508240935, 0.0401558285885526, 0.12885825591848968, 0.05843572070722206, 0.048546598741384485], [2000, 0.3062257968424188, 0.03604408698242478, 0.1456657730116175, 0.058087578194816795, 0.049151027703306524]]}], [{'predictData': ''}]]}

  # a={'param': [[{'historyData': [['date', '美国', '中国', '日本', '德国', '英国'], [2017, 0.24033217649975208, 0.15171046108081307, 0.060361923648983636, 0.04561229548834903, 0.04561229548834903], [2016, 0.24519357387411117, 0.14735317355807215, 0.06518303924150645, 0.045825651830392417, 0.03489597050302871], [2015, 0.242116515232496, 0.1477819347942277, 0.058658471405665415, 0.04516301443078567, 0.03861571352218065], [2014, 0.22027044104637938, 0.1324402881334513, 0.061291545557942625, 0.04915961076709213, 0.038165044862883864], [2013, 0.2166125892277742, 0.12472420506164827, 0.06696950032446464, 0.04866969500324465, 0.03556132381570409], [2012, 0.21555288782179538, 0.11417900493530747, 0.08269974656529279, 0.04721888755502201, 0.03548085901027078], [2011, 0.21173260572987723, 0.10327421555252388, 0.08403819918144612, 0.051296043656207366, 0.03574351978171897], [2010, 0.22680412371134023, 0.09248029108550637, 0.08641600970285022, 0.05184960582171013, 0.03699211643420255], [2009, 0.23977386099102094, 0.08496840705021616, 0.08696375124709013, 0.05686730961090788, 0.03957432657133355], [2008, 0.23206684534132116, 0.07252088916916286, 0.07945766987230017, 0.059120290083556674, 0.04556203689106102], [2007, 0.25038907141621997, 0.06138682344803735, 0.07816012450285319, 0.05948469652429535, 0.053086633235344974], [2006, 0.26996493961823137, 0.05356447214647448, 0.08823529411764706, 0.0584339696143358, 0.052395792754187764], [2005, 0.2761020881670534, 0.04830204598186037, 0.10040075933347395, 0.06032482598607889, 0.053153343176545034], [2004, 0.28020095912308746, 0.044759077414934914, 0.11007079241836036, 0.06439826444393697, 0.05480703356930806], [2003, 0.2960390946502057, 0.0426954732510288, 0.11445473251028807, 0.06455761316872427, 0.05246913580246913], [2002, 0.3169745958429561, 0.0424364896073903, 0.11893764434180139, 0.06004618937644342, 0.05109699769053118], [2001, 0.31824992508240935, 0.0401558285885526, 0.12885825591848968, 0.05843572070722206, 0.048546598741384485], [2000, 0.3062257968424188, 0.03604408698242478, 0.1456657730116175, 0.058087578194816795, 0.049151027703306524]]}], [{'predictData': ''}], [{'predict': '10'}]]}
  a={'param': [[{'historyData': [['date', '美国', '中国', '日本', '德国', '英国'], [2017, 0.24033217649975208, 0.15171046108081307, 0.060361923648983636, 0.04561229548834903, 0.04561229548834903], [2016, 0.24519357387411117, 0.14735317355807215, 0.06518303924150645, 0.045825651830392417, 0.03489597050302871], [2015, 0.242116515232496, 0.1477819347942277, 0.058658471405665415, 0.04516301443078567, 0.03861571352218065], [2014, 0.22027044104637938, 0.1324402881334513, 0.061291545557942625, 0.04915961076709213, 0.038165044862883864], [2013, 0.2166125892277742, 0.12472420506164827, 0.06696950032446464, 0.04866969500324465, 0.03556132381570409], [2012, 0.21555288782179538, 0.11417900493530747, 0.08269974656529279, 0.04721888755502201, 0.03548085901027078], [2011, 0.21173260572987723, 0.10327421555252388, 0.08403819918144612, 0.051296043656207366, 0.03574351978171897], [2010, 0.22680412371134023, 0.09248029108550637, 0.08641600970285022, 0.05184960582171013, 0.03699211643420255], [2009, 0.23977386099102094, 0.08496840705021616, 0.08696375124709013, 0.05686730961090788, 0.03957432657133355], [2008, 0.23206684534132116, 0.07252088916916286, 0.07945766987230017, 0.059120290083556674, 0.04556203689106102], [2007, 0.25038907141621997, 0.06138682344803735, 0.07816012450285319, 0.05948469652429535, 0.053086633235344974], [2006, 0.26996493961823137, 0.05356447214647448, 0.08823529411764706, 0.0584339696143358, 0.052395792754187764], [2005, 0.2761020881670534, 0.04830204598186037, 0.10040075933347395, 0.06032482598607889, 0.053153343176545034], [2004, 0.28020095912308746, 0.044759077414934914, 0.11007079241836036, 0.06439826444393697, 0.05480703356930806], [2003, 0.2960390946502057, 0.0426954732510288, 0.11445473251028807, 0.06455761316872427, 0.05246913580246913], [2002, 0.3169745958429561, 0.0424364896073903, 0.11893764434180139, 0.06004618937644342, 0.05109699769053118], [2001, 0.31824992508240935, 0.0401558285885526, 0.12885825591848968, 0.05843572070722206, 0.048546598741384485], [2000, 0.3062257968424188, 0.03604408698242478, 0.1456657730116175, 0.058087578194816795, 0.049151027703306524]]}], [{'predictData': [['date', '美国', '中国', '日本', '德国', '英国'], [2017, 0.24033217649975208, 0.15171046108081307, 0.060361923648983636, 0.04561229548834903, 0.04561229548834903], [2016, 0.24519357387411117, 0.14735317355807215, 0.06518303924150645, 0.045825651830392417, 0.03489597050302871], [2015, 0.242116515232496, 0.1477819347942277, 0.058658471405665415, 0.04516301443078567, 0.03861571352218065], [2014, 0.22027044104637938, 0.1324402881334513, 0.061291545557942625, 0.04915961076709213, 0.038165044862883864], [2013, 0.2166125892277742, 0.12472420506164827, 0.06696950032446464, 0.04866969500324465, 0.03556132381570409], [2012, 0.21555288782179538, 0.11417900493530747, 0.08269974656529279, 0.04721888755502201, 0.03548085901027078], [2011, 0.21173260572987723, 0.10327421555252388, 0.08403819918144612, 0.051296043656207366, 0.03574351978171897], [2010, 0.22680412371134023, 0.09248029108550637, 0.08641600970285022, 0.05184960582171013, 0.03699211643420255], [2009, 0.23977386099102094, 0.08496840705021616, 0.08696375124709013, 0.05686730961090788, 0.03957432657133355], [2008, 0.23206684534132116, 0.07252088916916286, 0.07945766987230017, 0.059120290083556674, 0.04556203689106102], [2007, 0.25038907141621997, 0.06138682344803735, 0.07816012450285319, 0.05948469652429535, 0.053086633235344974], [2006, 0.26996493961823137, 0.05356447214647448, 0.08823529411764706, 0.0584339696143358, 0.052395792754187764], [2005, 0.2761020881670534, 0.04830204598186037, 0.10040075933347395, 0.06032482598607889, 0.053153343176545034], [2004, 0.28020095912308746, 0.044759077414934914, 0.11007079241836036, 0.06439826444393697, 0.05480703356930806], [2003, 0.2960390946502057, 0.0426954732510288, 0.11445473251028807, 0.06455761316872427, 0.05246913580246913], [2002, 0.3169745958429561, 0.0424364896073903, 0.11893764434180139, 0.06004618937644342, 0.05109699769053118], [2001, 0.31824992508240935, 0.0401558285885526, 0.12885825591848968, 0.05843572070722206, 0.048546598741384485], [2000, 0.3062257968424188, 0.03604408698242478, 0.1456657730116175, 0.058087578194816795, 0.049151027703306524]]}], [{'predict_periods': '11'}]]}
  a={'param': [[{'historyData': [['date', '美国', '中国', '日本', '德国', '英国'], [2017, 0.24033217649975208, 0.15171046108081307, 0.060361923648983636, 0.04561229548834903, 0.04561229548834903], [2016, 0.24519357387411117, 0.14735317355807215, 0.06518303924150645, 0.045825651830392417, 0.03489597050302871], [2015, 0.242116515232496, 0.1477819347942277, 0.058658471405665415, 0.04516301443078567, 0.03861571352218065], [2014, 0.22027044104637938, 0.1324402881334513, 0.061291545557942625, 0.04915961076709213, 0.038165044862883864], [2013, 0.2166125892277742, 0.12472420506164827, 0.06696950032446464, 0.04866969500324465, 0.03556132381570409], [2012, 0.21555288782179538, 0.11417900493530747, 0.08269974656529279, 0.04721888755502201, 0.03548085901027078], [2011, 0.21173260572987723, 0.10327421555252388, 0.08403819918144612, 0.051296043656207366, 0.03574351978171897], [2010, 0.22680412371134023, 0.09248029108550637, 0.08641600970285022, 0.05184960582171013, 0.03699211643420255], [2009, 0.23977386099102094, 0.08496840705021616, 0.08696375124709013, 0.05686730961090788, 0.03957432657133355], [2008, 0.23206684534132116, 0.07252088916916286, 0.07945766987230017, 0.059120290083556674, 0.04556203689106102], [2007, 0.25038907141621997, 0.06138682344803735, 0.07816012450285319, 0.05948469652429535, 0.053086633235344974], [2006, 0.26996493961823137, 0.05356447214647448, 0.08823529411764706, 0.0584339696143358, 0.052395792754187764], [2005, 0.2761020881670534, 0.04830204598186037, 0.10040075933347395, 0.06032482598607889, 0.053153343176545034], [2004, 0.28020095912308746, 0.044759077414934914, 0.11007079241836036, 0.06439826444393697, 0.05480703356930806], [2003, 0.2960390946502057, 0.0426954732510288, 0.11445473251028807, 0.06455761316872427, 0.05246913580246913], [2002, 0.3169745958429561, 0.0424364896073903, 0.11893764434180139, 0.06004618937644342, 0.05109699769053118], [2001, 0.31824992508240935, 0.0401558285885526, 0.12885825591848968, 0.05843572070722206, 0.048546598741384485], [2000, 0.3062257968424188, 0.03604408698242478, 0.1456657730116175, 0.058087578194816795, 0.049151027703306524]]}], [{'predictData': [['date', '美国', '中国', '日本', '德国', '英国'], [2017, 0.24033217649975208, 0.15171046108081307, 0.060361923648983636, 0.04561229548834903, 0.04561229548834903], [2016, 0.24519357387411117, 0.14735317355807215, 0.06518303924150645, 0.045825651830392417, 0.03489597050302871], [2015, 0.242116515232496, 0.1477819347942277, 0.058658471405665415, 0.04516301443078567, 0.03861571352218065], [2014, 0.22027044104637938, 0.1324402881334513, 0.061291545557942625, 0.04915961076709213, 0.038165044862883864], [2013, 0.2166125892277742, 0.12472420506164827, 0.06696950032446464, 0.04866969500324465, 0.03556132381570409], [2012, 0.21555288782179538, 0.11417900493530747, 0.08269974656529279, 0.04721888755502201, 0.03548085901027078], [2011, 0.21173260572987723, 0.10327421555252388, 0.08403819918144612, 0.051296043656207366, 0.03574351978171897], [2010, 0.22680412371134023, 0.09248029108550637, 0.08641600970285022, 0.05184960582171013, 0.03699211643420255], [2009, 0.23977386099102094, 0.08496840705021616, 0.08696375124709013, 0.05686730961090788, 0.03957432657133355], [2008, 0.23206684534132116, 0.07252088916916286, 0.07945766987230017, 0.059120290083556674, 0.04556203689106102], [2007, 0.25038907141621997, 0.06138682344803735, 0.07816012450285319, 0.05948469652429535, 0.053086633235344974], [2006, 0.26996493961823137, 0.05356447214647448, 0.08823529411764706, 0.0584339696143358, 0.052395792754187764], [2005, 0.2761020881670534, 0.04830204598186037, 0.10040075933347395, 0.06032482598607889, 0.053153343176545034], [2004, 0.28020095912308746, 0.044759077414934914, 0.11007079241836036, 0.06439826444393697, 0.05480703356930806], [2003, 0.2960390946502057, 0.0426954732510288, 0.11445473251028807, 0.06455761316872427, 0.05246913580246913], [2002, 0.3169745958429561, 0.0424364896073903, 0.11893764434180139, 0.06004618937644342, 0.05109699769053118], [2001, 0.31824992508240935, 0.0401558285885526, 0.12885825591848968, 0.05843572070722206, 0.048546598741384485], [2000, 0.3062257968424188, 0.03604408698242478, 0.1456657730116175, 0.058087578194816795, 0.049151027703306524]]}], [{'predict_periods': '11'}]]}


  # res=json.load(a)
  # print('res',res)
  column_name=a['param'][0][0]['historyData'][0]
  data=a['param'][0][0]['historyData'][1:]
  print(column_name)
  print(data)
  df=pd.DataFrame(data=data,columns=column_name)
  print('train.head\n',df.head(),)
  print('''df['date']''',type(df['date']),df['date'].to_list()[-1])


  test=a['param'][1][0]['predictData'][1:]
  test_name=a['param'][1][0]['predictData'][0]
  test_df=pd.DataFrame(data=test,columns=test_name)
  print('test_df.head',test_df.head())
  print(a['param'][1][0])
  print(a['param'][2][0])
def f2():
  print( min(7,3))

  x=[[4, 5, 6], [7, 8, 9]]
  length=len(x)
  data=zip([1,2,3],x[0],x[1])
  print('data',list(data))
  for each in x:
    a=zip([1,2,3],each)
    print('aa',list(a))


  # for x,y in data:
  #   print([x,y])
  a=[z for z in data]
  print('a',a)
def f3():
  a='pmi_i_1	pmi_i_2	pmi_i_3	pmi_n_1	pmi_n_2	pmi_n_3	ppi_1	ppi_2	ppi_3'
  res= ['{}'.format(each) for each in a.split('	')]
  print('res',res)
  b='''                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                     Y1   R-squared:                       1.000\nModel:                            OLS   Adj. R-squared:                  1.000\nMethod:                 Least Squares   F-statistic:                 4.566e+28\nDate:                Tue, 12 Mar 2019   Prob (F-statistic):          3.09e-169\nTime:                        17:14:43   Log-Likelihood:                 621.03\nNo. Observations:                  18   AIC:                            -1230.\nDf Residuals:                      12   BIC:                            -1225.\nDf Model:                           5                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst      -8.327e-16   3.39e-15     -0.246      0.810   -8.21e-15    6.54e-15\nX1             1.0000   5.65e-15   1.77e+14      0.000       1.000       1.000\nX2           2.22e-15   9.24e-15      0.240      0.814   -1.79e-14    2.24e-14\nX3          4.441e-16   1.05e-14      0.042      0.967   -2.24e-14    2.33e-14\nX4          3.553e-15   4.31e-14      0.083      0.936   -9.02e-14    9.74e-14\nX5          4.441e-15   2.62e-14      0.169      0.868   -5.27e-14    6.16e-14\n==============================================================================\nOmnibus:                        2.079   Durbin-Watson:                   0.016\nProb(Omnibus):                  0.354   Jarque-Bera (JB):                1.260\nSkew:                          -0.646   Prob(JB):                        0.533\nKurtosis:                       2.893   Cond. No.                         640.\n==============================================================================\n\nWarnings:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.', 'success': '0'}'''
  print(b)
def f4():
  data=[[1,2],[3,4]]
  name=['x1','x2']
  df=pd.DataFrame(data,columns=name)
  print(df.head(),df.columns)
def f5():
  a = pd.DataFrame([[1], [2]])
  print(a)
  print(a[0].tolist())
def f6():
  data={'param': [[['季度', 'PPI', 'NOI', 'SD', 'GDPGR'], ['200501', '0', '61.9', '49.9666666666667', '0'], ['200502', '0', '56.7666666666667', '50.5666666666667', '0'], ['200503', '0', '55.5333333333333', '51.3', '0'], ['200504', '0', '58.3333333333333', '50.4666666666667', '0'], ['200601', '0', '57.3666666666667', '50.1666666666667', '0'], ['200602', '0', '61.1333333333333', '50.4666666666667', '0'], ['200603', '0', '58.1333333333333', '51.7', '0'], ['200604', '0', '59.4', '51', '0'], ['200701', '0', '59.1666666666667', '50.1666666666667', '0'], ['200702', '0', '60.9666666666667', '51.6666666666667', '0'], ['200703', '0', '57.6666666666667', '51.6666666666667', '0'], ['200704', '0', '58.4666666666667', '51.6333333333333', '0'], ['200801', '0', '58.6333333333333', '50.9666666666667', '0'], ['200802', '0', '57.6666666666667', '51.4666666666667', '0'], ['200803', '0', '47.8333333333333', '50.5333333333333', '0'], ['200804', '0', '37.1', '44.8666666666667', '0'], ['200901', '0', '50', '45.9', '0'], ['200902', '0', '56.1', '50.1', '0'], ['200903', '0', '56.2', '51.8', '0'], ['200904', '0', '59.3', '51.9', '0'], ['201001', '0', '57.2333333333333', '51.1333333333333', '0'], ['201002', '0', '55.4', '51.9666666666667', '0'], ['201003', '0', '53.4333333333333', '52.1', '0'], ['201004', '0', '57.3', '51.8666666666667', '0'], ['201101', '0', '54.8', '49.9', '2.6'], ['201102', '0', '52.2333333333333', '50.9666666666667', '2.3'], ['201103', '0', '51.1666666666667', '50.6333333333333', '1.8'], ['201104', '0', '49.3666666666667', '49.1333333333333', '1.5'], ['201201', '0', '52.1666666666667', '49.2', '2'], ['201202', '0', '51.1666666666667', '50.4', '2.1'], ['201203', '0', '49.1666666666667', '49.1666666666667', '1.8'], ['201204', '0', '50.9333333333333', '48.9666666666667', '2'], ['201301', '0', '51.3333333333333', '48.4', '1.9'], ['201302', '0', '51.3', '48.8333333333333', '1.8'], ['201303', '0', '51.9333333333333', '49.1666666666667', '2.1'], ['201304', '0', '52.2666666666667', '49.1666666666667', '1.6'], ['201401', '0', '50.6666666666667', '48.1666666666667', '1.8'], ['201402', '0', '52.1', '48.3666666666667', '1.8'], ['201403', '0', '52.7666666666667', '48.2333333333333', '1.8'], ['201404', '0', '50.9666666666667', '48.2333333333333', '1.7'], ['201501', '99.3666666666667', '50.2666666666667', '48.0333333333333', '1.8'], ['201502', '99.7333333333333', '50.3', '48.1', '1.8'], ['201503', '99.3666666666667', '49.9333333333333', '47.9333333333333', '1.7'], ['201504', '99.5', '50.1', '47.6', '1.5'], ['201601', '99.9', '49.8333333333333', '47.8333333333333', '1.4'], ['201602', '100.333333333333', '50.7333333333333', '47.9666666666667', '1.9'], ['201603', '100.3', '50.8666666666667', '48.4', '1.7'], ['201604', '101.266666666667', '53.0666666666667', '48.9666666666667', '1.6'], ['201701', '100.566666666667', '53.0333333333333', '49.6333333333333', '1.5'], ['201702', '99.7', '52.5666666666667', '49.2', '1.8'], ['201703', '100.7', '53.5666666666667', '49.1', '1.7'], ['201704', '100.666666666667', '53.3', '48.7666666666667', '1.6'], ['201801', '100', '52.3', '48.5', '1.5'], ['201802', '100.166666666667', '53.3', '49.0333333333333', '1.7'], ['201803', '100.366666666667', '52.1666666666667', '48.9666666666667', '1.6'], ['201804', '99.7333333333333', '50.3', '48.1333333333333', '1.5'], ['201901', '0', '50.1', '47.65', '0']]], 'period': '12', 'dimension': 'quarter'}
  dd=data['param'][0]
  name=dd[0]
  da=dd[1:]
  df = pd.DataFrame(data=da,columns=name)
  print(df.head())
  print(data['period'])
  print(data['dimension'])
def f7():
  y=2006
  q=5
  periods=15
  for each_p in range(periods):
    if q<12:
      q=q+1
      print('len(q)',len(str(q)))
      print(str(y)+str(q))
    else:
      y=y+1
      q=1
      print(str(y)+str(q))
def predict_quarter_time(input):
  yq=str(input)
  # logger.info('yq:{}'.format(yq))
  y=int(yq[0:4])
  q=int(yq[5:])
  print(y,q)

def judge_null_str_value():
  import pandas as pd
  import numpy as np
  data=[[1949, 54167, 28145, 26022, 5765, 48402],
				[1950, 55196, 28669, 26527, 6169, 49027],
				[1951, 56300, 29231, 27069, 6632, 49668],
				# [' ', ' ', ' ', ' ', ' ', ' '],
				# []
        ]

  df = pd.DataFrame(data=data,columns=['年度', '年末总人口(万人)', '男性人口(万人)', '女性人口(万 人)', '城镇人口(万人)', '乡村人口(万人)'])#np.random.randn(10, 6)
  try :
    df=df.astype(float)
  except Exception as e:
    print('数据包含字符串，所有数据应当为数值')
    print(e)

  cols = df.isnull().any().values.tolist()
  if True in cols:
    df_T = df.T
    rows=df_T.isnull().any().values.tolist()
    print('rows,cols',rows,cols)
    row_num=[index+1  for index ,each in enumerate(rows) if each is True]
    col_num=[index + 1 for index, each in enumerate(cols) if each is True]
    print(row_num,col_num)
  else:
    print('数据没有缺失值')

  # # print(rows.index(True)+1,cols.index(True)+1)


  # # # Make a few areas have NaN values
  # # df.iloc[1:3, 1] = np.nan
  # # df.iloc[5, 3] = np.nan
  # # df.iloc[7:9, 5] = np.nan
  #
  # print(df.shape,df)
  # # 用来判断某列是否有缺失值
  #
  # #<class 'pandas.core.series.Series'>
  #
  #
  # # 用来判断某列是否全部为空值
  # print(df.isnull().all())
  #


  # df = pd.DataFrame({'BoolCol': [1, 2, 3, 3, 4],'attr': [22, 33, 22, 22, 66]},
  #        index=[10,20,30,40,50])
  # print(df)
  # a = df[(df.BoolCol==3)&(df.attr==22)].index.tolist()
  # print('a',a)
def f9():
  # while True:
    try:
      name ='1'# input('请输出姓名:(不能小于三位)')
      if len(name) < 3:
        print('go')
        raise Exception('短了！')  # 手动抛出异常

      else:
        pwd = input('请输入密码:')
      print('name pwd',name, pwd)
    except Exception as e:
      print('异常是',e)

  # #
  # try :
  #   a = 3
  #   if a < 4:
  #     # print('gogo')
  #     # yield 'go'
  #     raise Exception('抛出一个异常')
  #
  #   else:
  #     print(a)
  # except Exception as e:
  #   print('有问题')

def f10():
  import numpy as np
  name=['x1','x2','x3']
  b=np.array([[2,4,6],[4,6,9]])
  name_shape=len(name)
  data_shape=np.array(b).shape
  print(name_shape,data_shape)
  # if data_shape[1]<name_shape:
  #   np.column_stack(b,)
  df=pd.DataFrame(data=b,columns=name)
  print(df)


if __name__=='__main__':
  f10()
  # res=f9()

  # judge_null_str_value()
  # predict_quarter_time('201503')
  # f7()
  # f6()
  # f5()
  # f4()
  # f3()
  # f2()
  # f1()
  # print('哈哈')
